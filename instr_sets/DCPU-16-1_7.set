-OPTIONS
NAME="DCPU-16"
VERSION=1.7
WORD_LEN=STATIC              ; Words are x bit static, OP Codes they cannot vary in size, RISC type machine.
WORD_SIZE=16                 ; 16bit OPcodes
WORDS_RAM=0x10000            ; Number of Words in RAM 

;Intruction name:ARG1,ARG2,..:OPCODE(bits)
-INSTRUCTIONS
SET:b,a:aaaaaabbbbb00001:  ;sets b to a
ADD:b,a:aaaaaabbbbb00010:  ;sets b to b+a, sets EX to 0x0001 if there's an overflow, 0x0 otherwise
SUB:b,a:aaaaaabbbbb00011:  ;sets b to b-a, sets EX to 0xffff if there's an underflow, 0x0 otherwise
MUL:b,a:aaaaaabbbbb00100:  ;sets b to b*a, sets EX to ((b*a)>>16)&0xffff (treats b, a as unsigned)
MLI:b,a:aaaaaabbbbb00101:  ;like MUL, but treat b, a as signed
DIV:b,a:aaaaaabbbbb00110:  ;sets b to b/a, sets EX to ((b<<16)/a)&0xffff. if a==0, sets b and EX to 0 instead. (treats b, a as unsigned)
DVI:b,a:aaaaaabbbbb00111:  ;like DIV, but treat b, a as signed. Rounds towards 0
MOD:b,a:aaaaaabbbbb01000:  ;sets b to b%a. if a==0, sets b to 0 instead.
MDI:b,a:aaaaaabbbbb01001:  ;like MOD, but treat b, a as signed. (MDI -7, 16 == -7)
AND:b,a:aaaaaabbbbb01010:  ;sets b to b&a
BOR:b,a:aaaaaabbbbb01011:  ;sets b to b|a
XOR:b,a:aaaaaabbbbb01100:  ;sets b to b^a
SHR:b,a:aaaaaabbbbb01101:  ;sets b to b>>>a, sets EX to ((b<<16)>>a)&0xffff (logical shift)
ASR:b,a:aaaaaabbbbb01110:  ;sets b to b>>a, sets EX to ((b<<16)>>>a)&0xffff (arithmetic shift) (treats b as signed)
SHL:b,a:aaaaaabbbbb01111:  ;sets b to b<<a, sets EX to ((b<<a)>>16)&0xffff
IFB:b,a:aaaaaabbbbb10000:  ;performs next instruction only if (b&a)!=0
IFC:b,a:aaaaaabbbbb10001:  ;performs next instruction only if (b&a)==0
IFE:b,a:aaaaaabbbbb10010:  ;performs next instruction only if b==a 
IFN:b,a:aaaaaabbbbb10011:  ;performs next instruction only if b!=a 
IFG:b,a:aaaaaabbbbb10101:  ;performs next instruction only if b>a 
IFA:b,a:aaaaaabbbbb10110:  ;performs next instruction only if b>a (signed)
IFL:b,a:aaaaaabbbbb10111:  ;performs next instruction only if b<a 
IFU:b,a:aaaaaabbbbb11000:  ;performs next instruction only if b<a (signed)
ADX:b,a:aaaaaabbbbb11010:  ;sets b to b+a+EX, sets EX to 0x0001 if there is an over-flow, 0x0 otherwise
SBX:b,a:aaaaaabbbbb11011:  ;sets b to b-a+EX, sets EX to 0xFFFF if there is an under-flow, 0x0 otherwise
STI:b,a:aaaaaabbbbb11110:  ;sets b to a, then increases I and J by 1
STD:b,a:aaaaaabbbbb11111:  ;sets b to a, then decreases I and J by 1
JSR:a  :aaaaaa0000100000:  ;pushes the address of the next instruction to the stack, then sets PC to a
INT:a  :aaaaaa0100000000:  ;triggers a software interrupt with message a 
IAG:a  :aaaaaa0100100000:  ;sets a to IA
IAS:a  :aaaaaa0101000000:  ;sets IA to a
RFI:a  :aaaaaa0101100000:  ;disables interrupt queueing, pops A from the stack, then pops PC from the stack
IAQ:a  :aaaaaa0110000000:  ;if a is nonzero, interrupts will be added to the queue instead of
                           ;triggered. if a is zero, interrupts will be triggered as normal again
HWN:a  :aaaaaa1000000000:  ;sets a to number of connected hardware devices
HWQ:a  :aaaaaa1000100000:  ;sets A, B, C, X, Y registers to information about hardware 'a'
                           ;A+(B<<16) is a 32 bit word identifying the hardware id
                           ;C is the hardware version
                           ;X+(Y<<16) is a 32 bit word identifying the manufacturer
HWI:a  :aaaaaa1001000000:  ;sends an interrupt to hardware a

;Argument name:SUBARG1,SUBARG2,...:BIT Pattern:Next Word:Shift the value:Used for what instr:
-ARGUMENTS
[a]  :a  :001aaa:::[ABCXYZIJ]\{1\}:All:
R[a] :a  :001aaa:::[ABCXYZIJ]\{1\}:All:  ; Harder force on this form

[n+a]:n,a:010aaa:nnnnnnnnnnnnnnnn::[a-zA-Z0-9]\{1,100\},[ABCXYZIJ]\{1\}:All: ; [next word + register]

[n]  :n  :011110:nnnnnnnnnnnnnnnn:::All: ; [next word]
P[n] :n  :011110:nnnnnnnnnnnnnnnn:::All: ; Force this form

n    :n  :011111:nnnnnnnnnnnnnnnn:::All: ; next word
L[n] :n  :011111:nnnnnnnnnnnnnnnn:::All: ; Force this form

v    :v  :1vvvvv::+1::All:               ; Literal value [-1..30], there is a shift +1?
S[v] :v  :1vvvvv::+1::All:               ; Force this form

-HARDSYMBOLS
A          :000:All:
B          :001:All:
C          :010:All:
X          :011:All:
Y          :100:All:
Z          :101:All:
I          :110:All:
J          :111:All:
POP        :11000:All: ; if in a [SP++]
PUSH       :11000:All: ; if in b [--SP]
PEEK       :11001:All: ; [SP]
SP         :11011:All:
PC         :11100:All:
EX	   :11101:All:

-SYMBOLS
