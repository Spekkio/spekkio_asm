; It's not possible to design a OPcodes with mixed-in 
; arguments, like this bbbbaabbaaaa0101, they need to
; be in a line -> bbbbbbaaaaaa0101.

; x = dont care
; a-z,A-Z (except x) = argument
; a-z!=A-Z

-OPTIONS
WORD_LEN=STATIC     ; Words are x bit static, OP Codes they cannot vary in size, RISC type machine.
WORD_SIZE=16        ; 16bit OPcodes
POINTER_SIZE=16	    ; 16bit pointers, pointer 0x0001 points 16 bit after pointer 0x0000
WORDS_RAM=0x10000   ; Number of Words in RAM 

;BITS_RAM=0x100000 
;BYTES_RAM=0x20000  ; 128kByte RAM

;Intruction name:ARG1,ARG2,..:OPCODE(bits)
-INSTRUCTIONS
NOP:   :xxxxxxxxxxx00000:   ; 
JSR:a  :aaaaaa0000010000:   ; - pushes the address of the next instruction to the stack, then sets PC to 'a'
SET:a,b:bbbbbbaaaaaa0001:   ; - sets a to b
ADD:a,b:bbbbbbaaaaaa0010:   ; - sets a to a+b, sets O to 0x0001 if there's an overflow, 0x0 otherwise
SUB:a,b:bbbbbbaaaaaa0011:   ; - sets a to a-b, sets O to 0xffff if there's an underflow, 0x0 otherwise
MUL:a,b:bbbbbbaaaaaa0100:   ; - sets a to a*b, sets O to ((a*b)>>16)&0xffff
DIV:a,b:bbbbbbaaaaaa0101:   ; - sets a to a/b, sets O to ((a<<16)/b)&0xffff. if b==0, sets a and O to 0 instead.
MOD:a,b:bbbbbbaaaaaa0110:   ; - sets a to a%b. if b==0, sets a to 0 instead.
SHL:a,b:bbbbbbaaaaaa0111:   ; - sets a to a<<b, sets O to ((a<<b)>>16)&0xffff
SHR:a,b:bbbbbbaaaaaa1000:   ; - sets a to a>>b, sets O to ((a<<16)>>b)&0xffff
AND:a,b:bbbbbbaaaaaa1001:   ; - sets a to a&b
BOR:a,b:bbbbbbaaaaaa1010:   ; - sets a to a|b
XOR:a,b:bbbbbbaaaaaa1011:   ; - sets a to a^b
IFE:a,b:bbbbbbaaaaaa1100:   ; - performs next instruction only if a==b
IFN:a,b:bbbbbbaaaaaa1101:   ; - performs next instruction only if a!=b
IFG:a,b:bbbbbbaaaaaa1110:   ; - performs next instruction only if a>b
IFB:a,b:bbbbbbaaaaaa1111:   ; - performs next instruction only if (a&b)!=0

;Argument name:SUBARG1,SUBARG2,...:BIT Pattern:Next Word:Extra Regex:Used for what instr:
-ARGUMENTS
[a]        :a  :001aaa:                :  :[ABCXYZIJ]\{1\}:All:
R[a]       :a  :001aaa:                :  :                                    :All: ; Force this, since first one also matches further down.
[n+a]      :n,a:010aaa:nnnnnnnnnnnnnnnn:  :[a-zA-Z0-9]\{1,100\},[ABCXYZIJ]\{1\}:All: ; [next word + register]
[n]        :n  :011110:nnnnnnnnnnnnnnnn:  :                                    :All: ; [next word]
P[n]       :n  :011110:nnnnnnnnnnnnnnnn:  :                                    :All: ; Force [next word]
L[n]       :n  :011111:nnnnnnnnnnnnnnnn:  :                                    :All: ; Force next word
S[v]       :v  :1vvvvv:                :+1:                                    :All: ; Force literal value
n          :n  :011111:nnnnnnnnnnnnnnnn:  :                                    :All: ; next word
v          :v  :1vvvvv:                :+1:                                    :All: ; Literal value

; Hardsymbols will not be encoded, they will be put straight into the opcode
-HARDSYMBOLS
A          :000000:All:
B          :000001:All:
C          :000010:All:
X          :000011:All:
Y          :000100:All:
Z          :000101:All:
I          :000110:All:
J          :000111:All:
SP         :011011:All:
PC         :011100:All:
O          :011101:All:
POP        :011000:All: ; [SP++]
PEEK       :011001:All: ; [SP]
PUSH       :011010:All: ; [--SP]

; These are values that also will go trough ARGUMENTS to detect an encoding rule,
; like n or v in arguments
-SYMBOLS
